// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportAPIClient is the client API for ReportAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportAPIClient interface {
	/// Get all available pubkeys, with Intel SGX reports, fog urls, and expiry info
	GetReports(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type reportAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewReportAPIClient(cc grpc.ClientConnInterface) ReportAPIClient {
	return &reportAPIClient{cc}
}

func (c *reportAPIClient) GetReports(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/report.ReportAPI/GetReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportAPIServer is the server API for ReportAPI service.
// All implementations must embed UnimplementedReportAPIServer
// for forward compatibility
type ReportAPIServer interface {
	/// Get all available pubkeys, with Intel SGX reports, fog urls, and expiry info
	GetReports(context.Context, *ReportRequest) (*ReportResponse, error)
	mustEmbedUnimplementedReportAPIServer()
}

// UnimplementedReportAPIServer must be embedded to have forward compatible implementations.
type UnimplementedReportAPIServer struct {
}

func (*UnimplementedReportAPIServer) GetReports(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReports not implemented")
}
func (*UnimplementedReportAPIServer) mustEmbedUnimplementedReportAPIServer() {}

func RegisterReportAPIServer(s *grpc.Server, srv ReportAPIServer) {
	s.RegisterService(&_ReportAPI_serviceDesc, srv)
}

func _ReportAPI_GetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAPIServer).GetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.ReportAPI/GetReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAPIServer).GetReports(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "report.ReportAPI",
	HandlerType: (*ReportAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReports",
			Handler:    _ReportAPI_GetReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}
